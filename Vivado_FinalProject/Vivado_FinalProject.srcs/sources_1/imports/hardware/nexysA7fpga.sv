// nexysA7fpga.sv - Top level module for the Nexys A7 version of the ECE 544 Project 1
//
// Created By:	Alex Beaulier
// Date:		5-May-2022
// Version:		1.0
//
// Description:
// ------------
// This module provides the top level. 
// 1 Relay         - JA Top Pin Relay Out
// 1 PMOD OLED     - JB Both Rows
// 1 PMOD Joystick - JC Top Row
// 3 PMOD Steppers - JD(Top X, Bottom Y), JC Bottom Z
//////////////////////////////////////////////////////////////////////
module nexysA7fpga(
    input logic         clk,			// 100Mhz clock input
    input logic         btnC,			// center pushbutton
    input logic         btnU,			// UP (North) pusbhbutton
    input logic         btnL,			// LEFT (West) pushbutton
    input logic         btnD,			// DOWN (South) pushbutton  - used for system reset
    input logic         btnR,			// RIGHT (East) pushbutton
	input logic         rst,	// CPU reset pushbutton
    input logic  [15:2]  sw,			// slide switches on Nexys 4
    input logic  [1:0] sw_en,
    output logic [15:0] led,			// LEDs on Nexys 4   
    output logic [7:0]  an,             // Seven Segment display
    output logic [6:0]  seg,
    output logic        dp,             // decimal point display on the seven segment 
    
    input logic         uart_rtl_rxd,	// USB UART Rx and Tx on Nexys 4
    output logic        uart_rtl_txd,	
    
	output logic    [7:0]       JA,            // JA Pmod conector  - Relay
	inout  logic	[7:0] 		JB,				// JB Pmod connector - PmodOLEDrgb
    output logic                JC_jstk_input_ss_0,   // JC Pmod connector - Stepper Z and Joystick
    input  logic                JC_jstk_input_miso_2, // JC Pmod connector - Stepper Z and Joystick
    output logic                JC_jstk_input_sclk_3, // JC Pmod connector - Stepper Z and Joystick           
	output  logic	[3:0] 		JC_stepz,		// JC Pmod connector - Stepper Z and Joystick
	output  logic	[3:0]		JD_stepx,		// JD Pmod connector - Stepper X and Stepper Y
    output  logic	[3:0]		JD_stepy		// JD Pmod connector - Stepper X and Stepper Y

);

// internal variables
// Clock and Reset 
logic           sysclk; 
logic           sysreset_n, sysreset;
logic           clk_3; //Used for PWM modules

// OLED pins 
wire 				pmodoledrgb_out_pin1_i, pmodoledrgb_out_pin1_io, pmodoledrgb_out_pin1_o, pmodoledrgb_out_pin1_t; 
wire 				pmodoledrgb_out_pin2_i, pmodoledrgb_out_pin2_io, pmodoledrgb_out_pin2_o, pmodoledrgb_out_pin2_t; 
wire 				pmodoledrgb_out_pin3_i, pmodoledrgb_out_pin3_io, pmodoledrgb_out_pin3_o, pmodoledrgb_out_pin3_t; 
wire 				pmodoledrgb_out_pin4_i, pmodoledrgb_out_pin4_io, pmodoledrgb_out_pin4_o, pmodoledrgb_out_pin4_t; 
wire 				pmodoledrgb_out_pin7_i, pmodoledrgb_out_pin7_io, pmodoledrgb_out_pin7_o, pmodoledrgb_out_pin7_t; 
wire 				pmodoledrgb_out_pin8_i, pmodoledrgb_out_pin8_io, pmodoledrgb_out_pin8_o, pmodoledrgb_out_pin8_t; 
wire 				pmodoledrgb_out_pin9_i, pmodoledrgb_out_pin9_io, pmodoledrgb_out_pin9_o, pmodoledrgb_out_pin9_t; 
wire 				pmodoledrgb_out_pin10_i, pmodoledrgb_out_pin10_io, pmodoledrgb_out_pin10_o, pmodoledrgb_out_pin10_t;

// wire to connect the joystick data bewtween the Joystick 
// interface and the decoder
wire [9:0] x_data_net, y_data_net, z_data_net;

// wire to connect the direction from the decoder to the 
// Servo controller
wire [1:0] x_direction_net, y_direction_net, z_direction_net;

// GPIO pins 
logic [7:0]	    gpio_in;				// embsys GPIO input port
logic [7:0]	    gpio_out;				// embsys GPIO output port
logic [31:0]    gpio_r_hi_in;
logic [31:0]    gpio_r_lo_in;
logic [31:0]    gpio_g_hi_in;
logic [31:0]    gpio_g_lo_in;
logic [31:0]    gpio_b_hi_in;
logic [31:0]    gpio_b_lo_in;

// Drive the leds from the signal generated by the microblaze 
assign led = led_int;                   // LEDs are driven by led

// make the connections
// system-wide signals
assign sysclk = clk;
assign sysreset_n = rst;		// The CPU reset pushbutton is asserted low.  The other pushbuttons are asserted high
										// but the Microblaze for Nexys 4 expects reset to be asserted low
assign sysreset = ~sysreset_n;			// Generate a reset signal that is asserted high for any logic blocks expecting it.


// TODO
// JA Relay Pin, active low


// JB Pmod OLED connections 
assign JB[0] = pmodoledrgb_out_pin1_io;
assign JB[1] = pmodoledrgb_out_pin2_io;
assign JB[2] = pmodoledrgb_out_pin3_io;
assign JB[3] = pmodoledrgb_out_pin4_io;
assign JB[4] = pmodoledrgb_out_pin7_io;
assign JB[5] = pmodoledrgb_out_pin8_io;
assign JB[6] = pmodoledrgb_out_pin9_io;
assign JB[7] = pmodoledrgb_out_pin10_io;

// INITIALIZATION --------------------------------
// PmodStepper/Joystick
// JC //TODO
// Joystick Top Row
PmodJSTK_Demo joystick_input(
    .CLK(clk),
    .RST(~rst),
    .MISO(JC_jstk_input_miso_2), //jstk_input_miso_2
     .SW(sw[3]),
    .SS(JC_jstk_input_ss_0),  //jstk_input_ss_0
    .SCLK(JC_jstk_input_sclk_3),   //jstk_input_sclk_3
     .x_data(x_data_net),
     .y_data(y_data_net)
    );
    
// Decoder that decodes the joystick data into 
// the x and y direction signals.    
jstk_data_decoder decode(
    .x_data(x_data_net),
    .y_data(y_data_net),
    .x_direction(x_direction_net),
    .y_direction(y_direction_net)
    );
    
// Stepper Row 2
pmod_step_interface z (
    .clk(clk),
    .rst(~rst),
    .direction(z_direction_net),    //z_direction_net
    .en(sw[4]),
    .signal_out(JC_stepz)
    );
        
// PmodSteppers signals
// JD - top row Stepper X, bottom row Stepper Y
// Stepper X
pmod_step_interface x (
    .clk(clk),
    .rst(~rst),
    .direction(x_direction_net),
    .en(sw_en[0]),
    .signal_out(JD_stepx)
    );
// Stepper Y
pmod_step_interface y(
    .clk(clk),
    .rst(~rst),
    .direction(y_direction_net),
    .en(sw_en[1]),
    .signal_out(JD_stepy)
    );
    



// instantiate the embedded system
embsys EMBSYS
(
		// PMOD OLED pins 
        .PmodOLEDrgb_out_0_pin10_i(pmodoledrgb_out_pin10_i),
	    .PmodOLEDrgb_out_0_pin10_o(pmodoledrgb_out_pin10_o),
	    .PmodOLEDrgb_out_0_pin10_t(pmodoledrgb_out_pin10_t),
	    .PmodOLEDrgb_out_0_pin1_i(pmodoledrgb_out_pin1_i),
	    .PmodOLEDrgb_out_0_pin1_o(pmodoledrgb_out_pin1_o),
	    .PmodOLEDrgb_out_0_pin1_t(pmodoledrgb_out_pin1_t),
	    .PmodOLEDrgb_out_0_pin2_i(pmodoledrgb_out_pin2_i),
	    .PmodOLEDrgb_out_0_pin2_o(pmodoledrgb_out_pin2_o),
	    .PmodOLEDrgb_out_0_pin2_t(pmodoledrgb_out_pin2_t),
	    .PmodOLEDrgb_out_0_pin3_i(pmodoledrgb_out_pin3_i),
	    .PmodOLEDrgb_out_0_pin3_o(pmodoledrgb_out_pin3_o),
	    .PmodOLEDrgb_out_0_pin3_t(pmodoledrgb_out_pin3_t),
	    .PmodOLEDrgb_out_0_pin4_i(pmodoledrgb_out_pin4_i),
	    .PmodOLEDrgb_out_0_pin4_o(pmodoledrgb_out_pin4_o),
	    .PmodOLEDrgb_out_0_pin4_t(pmodoledrgb_out_pin4_t),
	    .PmodOLEDrgb_out_0_pin7_i(pmodoledrgb_out_pin7_i),
	    .PmodOLEDrgb_out_0_pin7_o(pmodoledrgb_out_pin7_o),
	    .PmodOLEDrgb_out_0_pin7_t(pmodoledrgb_out_pin7_t),
	    .PmodOLEDrgb_out_0_pin8_i(pmodoledrgb_out_pin8_i),
	    .PmodOLEDrgb_out_0_pin8_o(pmodoledrgb_out_pin8_o),
	    .PmodOLEDrgb_out_0_pin8_t(pmodoledrgb_out_pin8_t),
	    .PmodOLEDrgb_out_0_pin9_i(pmodoledrgb_out_pin9_i),
	    .PmodOLEDrgb_out_0_pin9_o(pmodoledrgb_out_pin9_o),
	    .PmodOLEDrgb_out_0_pin9_t(pmodoledrgb_out_pin9_t),
	    // GPIO pins 
		.gpio_rtl_0_tri_i(gpio_in),
		.gpio_rtl_1_tri_o(gpio_out),
        // Seven Segment Display anode control  
        .an_0(an),
        .dp_0(dp),
        .led_0(led_int),
        .seg_0(seg),
        // Push buttons and switches  
        .btnC_0(btnC),
        .btnD_0(btnD),
        .btnL_0(btnL),
        .btnR_0(btnR),
        .btnU_0(btnU),
        .clk_out3_0(clk_3),
        .sw_0(sw),
        // reset and clock 
        .sysreset_n(sysreset_n),
        .sysclk(sysclk),
        // UART pins 
        .uart_rtl_0_rxd(uart_rtl_rxd),
        .uart_rtl_0_txd(uart_rtl_txd)
);

// Tristate buffers for the pmodOLEDrgb pins
// generated by PMOD bridge component.  Many
// of these signals are not tri-state.
IOBUF pmodoledrgb_out_pin1_iobuf
(
    .I(pmodoledrgb_out_pin1_o),
    .IO(pmodoledrgb_out_pin1_io),
    .O(pmodoledrgb_out_pin1_i),
    .T(pmodoledrgb_out_pin1_t)
);

IOBUF pmodoledrgb_out_pin2_iobuf
(
    .I(pmodoledrgb_out_pin2_o),
    .IO(pmodoledrgb_out_pin2_io),
    .O(pmodoledrgb_out_pin2_i),
    .T(pmodoledrgb_out_pin2_t)
);

IOBUF pmodoledrgb_out_pin3_iobuf
(
    .I(pmodoledrgb_out_pin3_o),
    .IO(pmodoledrgb_out_pin3_io),
    .O(pmodoledrgb_out_pin3_i),
    .T(pmodoledrgb_out_pin3_t)
);

IOBUF pmodoledrgb_out_pin4_iobuf
(
    .I(pmodoledrgb_out_pin4_o),
    .IO(pmodoledrgb_out_pin4_io),
    .O(pmodoledrgb_out_pin4_i),
    .T(pmodoledrgb_out_pin4_t)
);

IOBUF pmodoledrgb_out_pin7_iobuf
(
    .I(pmodoledrgb_out_pin7_o),
    .IO(pmodoledrgb_out_pin7_io),
    .O(pmodoledrgb_out_pin7_i),
    .T(pmodoledrgb_out_pin7_t)
);

IOBUF pmodoledrgb_out_pin8_iobuf
(
    .I(pmodoledrgb_out_pin8_o),
    .IO(pmodoledrgb_out_pin8_io),
    .O(pmodoledrgb_out_pin8_i),
    .T(pmodoledrgb_out_pin8_t)
);

IOBUF pmodoledrgb_out_pin9_iobuf
(
    .I(pmodoledrgb_out_pin9_o),
    .IO(pmodoledrgb_out_pin9_io),
    .O(pmodoledrgb_out_pin9_i),
    .T(pmodoledrgb_out_pin9_t)
);

IOBUF pmodoledrgb_out_pin10_iobuf
(
    .I(pmodoledrgb_out_pin10_o),
    .IO(pmodoledrgb_out_pin10_io),
    .O(pmodoledrgb_out_pin10_i),
    .T(pmodoledrgb_out_pin10_t)
);
endmodule: nexysA7fpga